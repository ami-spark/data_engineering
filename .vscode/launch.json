{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "command": "npm start",
            "name": "Run npm start",
            "request": "launch",
            "type": "node-terminal"
        },
        {
            "name": "Launch Chrome",
            "request": "launch",
            "type": "chrome",
            "url": "http://localhost:8080",
            "webRoot": "${workspaceFolder}"
        },
        {
            "name": "Attach to Chrome",
            "port": 9222,
            "request": "attach",
            "type": "chrome",
            "webRoot": "${workspaceFolder}"
        },
    {
        "type": "aws-sam",
        "request": "direct-invoke",
        "name": "Invoke Lambda with API Gateway",
        "invokeTarget": {
            "target": "api",
            "templatePath": "Template Location",
            "logicalId": "Function Logical ID"
        },
        "api": {
            "path": "Path",
            "httpMethod": "Method",
            "payload": {
                "json": {}
            }
        }
    },
        {
            "name": "Attach",
            "port": 9229,
            "request": "attach",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "type": "node"
        },
    {
        "args": [
            "--extensionDevelopmentPath=${workspaceFolder}"
        ],
        "name": "Launch Extension",
        "outFiles": [
            "${workspaceFolder}/out/**/*.js"
        ],
        "preLaunchTask": "npm",
        "request": "launch",
        "type": "extensionHost"
    },
        {
            "type": "aws-sam",
            "request": "direct-invoke",
            "name": "Invoke Lambda with API Gateway",
            "invokeTarget": {
                "target": "api",
                "templatePath": "Template Location",
                "logicalId": "Function Logical ID"
            },
            "api": {
                "path": "Path",
                "httpMethod": "Method",
                "payload": {
                    "json": {"id":"8000"}
                }
            }
        },
        {
            "name": "Attach",
            "port": 9229,
            "request": "attach",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "type": "node"
        },
        {
            "name": "Launch Chrome",
            "request": "launch",
            "type": "chrome",
            "url": "http://localhost:8080",
            "webRoot": "${workspaceFolder}"
        },
        {
            "name": "Launch Chrome",
            "request": "launch",
            "type": "chrome",
            "url": "http://localhost:8080",
            "webRoot": "${workspaceFolder}"
        },

        {
            "name": "Kubernetes: Run/Debug",
            "type": "cloudcode.kubernetes",
            "request": "launch",
            "skaffoldConfig": "${workspaceFolder}/skaffold.yaml",
            "watch": true,
            "cleanUp": true,
            "portForward": true
        },
        {
            "type": "aws-sam",
            "request": "direct-invoke",
            "name": "Invoke Lambda",
            "invokeTarget": {
                "target": "code",
                "lambdaHandler": "Function Handler",
                "projectRoot": "${workspaceFolder}"
            },
            "lambda": {
                "runtime": "Lambda Runtime",
                "payload": {
                    "json": {}
                }
            }
        },
        {
            "type": "aws-sam",
            "request": "direct-invoke",
            "name": "Invoke Lambda with API Gateway",
            "invokeTarget": {
                "target": "api",
                "templatePath": "Template Location",
                "logicalId": "Function Logical ID"
            },
            "api": {
                "path": "Path",
                "httpMethod": "Method",
                "payload": {
                    "json": {}
                }
            }
        }

    ]
}